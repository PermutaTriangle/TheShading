# This file was *autogenerated* from the file gen.sage
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0)
def subsets(elems):
    def bt(at, cur):
        if at == len(elems):
            yield cur
        else:
            for x in bt(at+_sage_const_1 , cur): yield x
            for x in bt(at+_sage_const_1 , cur + [elems[at]]): yield x
    for x in bt(_sage_const_0 , []): yield x

want = set([
    (_sage_const_0 ,_sage_const_0 ),
    (_sage_const_0 ,_sage_const_1 ),
    (_sage_const_1 ,_sage_const_0 ),
    (_sage_const_1 ,_sage_const_1 ),
    (_sage_const_1 ,_sage_const_2 ),
    (_sage_const_1 ,_sage_const_3 ),
    (_sage_const_2 ,_sage_const_1 ),
    (_sage_const_2 ,_sage_const_2 ),
    (_sage_const_2 ,_sage_const_3 ),
    (_sage_const_3 ,_sage_const_1 ),
    (_sage_const_3 ,_sage_const_2 )
])

bad = [
    set([(_sage_const_0 ,_sage_const_0 ),(_sage_const_1 ,_sage_const_1 )]),
    set([(_sage_const_1 ,_sage_const_2 ),(_sage_const_2 ,_sage_const_3 )]),
    set([(_sage_const_2 ,_sage_const_1 ),(_sage_const_3 ,_sage_const_2 )]),
    set([(_sage_const_0 ,_sage_const_1 ),(_sage_const_1 ,_sage_const_0 )]),
    set([(_sage_const_1 ,_sage_const_3 ),(_sage_const_2 ,_sage_const_2 ),(_sage_const_3 ,_sage_const_1 )])
]

for mp in subsets(list(want)):
    mps = set(mp)
    if any( x <= mps for x in bad ):
        continue
    print(mp)

